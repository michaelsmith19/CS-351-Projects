package com.putable.tilenet.Util.XMLTags;

import java.awt.Color;

import org.xml.sax.Attributes;

public class SetTag extends XMLTag {
	private Integer x;
	private Integer y;
	private Integer energy;
	private String name;
	private String text;
	private Color bgColor;
	private Color fgColor;
	private String objid;
	private String image;

	/**
	 * Constructor for SetTag use in server. We should call this when we want to
	 * send word of a change in matrix element.
	 * 
	 * @param objid
	 *            the object being set.
	 */
	public SetTag(String objid) {
		super(TagType.SET);

		this.objid = objid;
	}

	public SetTag(Attributes atts) {
		super(TagType.SET);
		// Check for an improper integers with a try catch
		try {
			this.x = (atts.getValue("x") != null) ? Integer.parseInt(atts
					.getValue("x")) : null;
			this.y = (atts.getValue("y") != null) ? Integer.parseInt(atts
					.getValue("y")) : null;
			this.energy = (atts.getValue("energy") != null) ? Integer
					.parseInt(atts.getValue("energy")) : null;
		} catch (NumberFormatException e) {
			isLegal = false;
		}
		this.name = atts.getValue("name");
		this.text = atts.getValue("text");
		// Check for improper integers in the color attributes.
		try {
			this.bgColor = hex2Color(atts.getValue("bgColor"));
			this.fgColor = hex2Color(atts.getValue("fgColor"));
		} catch (NumberFormatException e) {
			isLegal = false;
		}
		this.objid = atts.getValue("objid");
		this.image = atts.getValue("image");
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("<set ");
		sb.append("objid=\"" + objid + "\"");
		if (x != null)
			sb.append(" x=\"" + x + "\"");
		if (y != null)
			sb.append(" y=\"" + y + "\"");
		if (energy != null)
			sb.append(" energy=\"" + energy + "\"");
		if (bgColor != null)
			sb.append(" bgcolor=\"" + color2Hex(bgColor) + "\"");
		if (fgColor != null)
			sb.append(" fgcolor=\"" + color2Hex(fgColor) + "\"");

		if (image != null)
			sb.append(" image=\"" + image + "\"");
		if (text != null)
			sb.append(" text=\"" + text + "\"");
		if (name != null)
			sb.append(" name=\"" + name + "\"");
		sb.append("/>");
		return sb.toString();
	}

	private String color2Hex(Color color) {
		return Integer.toHexString(color.getRGB());
	}

	private Color hex2Color(String hexColor) throws NumberFormatException {
		if (hexColor == null)
			return null;

		int alpha = Integer.valueOf(hexColor.substring(0, 2), 16);
		String colorHex = hexColor.substring(2);
		Color noalpha = Color.decode("0x" + colorHex);

		return new Color(noalpha.getRed(), noalpha.getGreen(),
				noalpha.getBlue(), alpha);

	}

	public int getX() {
		return x;
	}

	public int getY() {
		return y;
	}

	public int getEnergy() {
		return energy;
	}

	public String getName() {
		return name;
	}

	public String getText() {
		return text;
	}

	public Color getBgColor() {
		return bgColor;
	}

	public Color getFgColor() {
		return fgColor;
	}

	public String getObjid() {
		return objid;
	}

	public String getImage() {
		return image;
	}

	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public void setEnergy(Integer energy) {
		this.energy = energy;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setText(String text) {
		this.text = text;
	}

	public void setBgColor(Color bgColor) {
		this.bgColor = bgColor;
	}

	public void setFgColor(Color fgColor) {
		this.fgColor = fgColor;
	}

	public void setImage(String image) {
		this.image = image;
	}

	public void setObjid(String str) {
		this.objid = str;
	}

	private boolean isLegal = true;

	@Override
	public boolean isLegal() {
		// Check each individual Attribute to make sure it is
		// valid for what it is representing.
		if (checkObjid())
			isLegal = true;

		return isLegal;
	}

	private boolean checkObjid() {
		// If the beginning letter is not among the 4 possible return false.
		char objType = this.objid.charAt(0);
		if (objType != 'm' || objType != 't' || objType != 'i'
				|| objType != 'a' || objType != 'k')
			return false;
		// If the number after the letter is negative it is an invalid objid.
		if (this.objid.charAt(1) == '-')
			return false;
		// Try to parse the integer. If it gives the NumberFormatException
		// than it was not a valid number so the objid was not valid either.
		try {
			Integer.parseInt(objid.substring(1));
		} catch (NumberFormatException e) {
			return false;
		}
		return true;
	}
}
