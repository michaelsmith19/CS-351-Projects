package com.putable.tilenet.Util;

import com.putable.tilenet.blueprints.Element.ElemType;
import com.putable.tilenet.blueprints.ElementBuilder;
import com.putable.tilenet.blueprints.Grid.GridType;
import com.putable.tilenet.blueprints.GridBuilder;
import com.putable.tilenet.blueprints.TileNetElementBuilder;
import com.putable.tilenet.blueprints.TileNetGridBuilder;
import com.putable.tilenet.client.TileNetClient;
import com.putable.tilenet.grid.HomeGrid;
import com.putable.tilenet.matrixelement.Matrix;

public class Driver {
	// ((c4.1.1.3)) A port can have the range 44456-44459
	private static final int PORT = 44457;
	private static final int MAX_CONNECTIONS = 5;

	@SuppressWarnings("unused")
	public static void main(String[] args) throws Exception {

		// How we can make a home matrix
		GridBuilder makeMatrices = new TileNetGridBuilder();
		HomeGrid home = (HomeGrid) makeMatrices.orderGrid(GridType.HOME);

		// How we can make Elements
		ElementBuilder makeElements = new TileNetElementBuilder();
		Matrix homeMatrix = (Matrix) makeElements.orderElement(ElemType.MATRIX);

		/*
		 * //Can view Grids JFrame frame = new JFrame();
		 * frame.setPreferredSize(new Dimension(600,600)); frame.setLayout(new
		 * GridLayout()); frame.add(home.toJPanel(500, 500)); frame.pack();
		 * frame.setAlwaysOnTop(true); frame.setVisible(true);
		 */

		// Start a server
		// ServerModel serverModel = new ServerModel(PORT, MAX_CONNECTIONS);
		// ExecutorService servEx = Executors.newSingleThreadExecutor();

		// Have a GUI
		TileNetClient gui = new TileNetClient();

		// Bots can connect also
		System.out.println(Common.sendTheBots(44455, 5, Common.botcmd_Connect));

		// Awesomely, the EXITONCLOSE calls system.exit()
		// So we don't have to work about shutting down server if run in here
		// while(!servEx.isTerminated()) { }
		// servEx.submit(serverModel);

	}
}
