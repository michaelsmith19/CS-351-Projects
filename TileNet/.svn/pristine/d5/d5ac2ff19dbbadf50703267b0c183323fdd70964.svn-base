package com.putable.tilenet.client;

import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import com.putable.tilenet.Util.ChatFeature;
import com.putable.tilenet.Util.XMLParser;
import com.putable.tilenet.Util.XMLTags.XMLTag;
import com.putable.tilenet.matrixelement.Agent;
import com.putable.tilenet.matrixelement.MatrixElementBuilder;
import com.putable.tilenet.matrixelement.TileNetMatrixElementBuilder;

public class TileNetClient {
	private static final int PORT = 44455;
	private JFrame jframe = new JFrame("Class Cast Exceptions TileNet");
	private JPanel chatPanel = new ChatFeature();
	private Agent agent;
	private BlockingQueue<XMLTag> bq;

	// Grid currentMatrix;

	public TileNetClient() {
		jframe.getContentPane().add(chatPanel, "North");
		jframe.pack();
	}

	/**
	 * Creates an InputDialog to get the IP address or hostName of a 'hopefully'
	 * running server.
	 * 
	 * @return A {@link String} that contains the hostName or IP address of the
	 *         server.
	 */
	private String getServerAddress() {
		return JOptionPane.showInputDialog(jframe,
				"Enter IP Address or host name of the Server:",
				"Please enter valid server information",
				JOptionPane.QUESTION_MESSAGE);
	}

	private boolean attemptConnection(String serverAddress) {
		MatrixElementBuilder makeElements = new TileNetMatrixElementBuilder();
		agent = (Agent) makeElements.orderElement("AGENT");
		agent.getConn().setDestination(serverAddress, PORT);
		// Try to connect to the port. If successful you will receive a valid
		// xml doctype and opening server tag.
		try {
			agent.getConn().connect();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Cannot connect to: "
					+ serverAddress + " please try again.");
			return false;
		}
		return true;
	}

	private void startParsing() throws ParserConfigurationException,
			SAXException, IOException {
		bq = new LinkedBlockingQueue<XMLTag>();

		XMLParser xmlp = new XMLParser(bq);
		xmlp.setInputSource(agent.getConn().getIn2());

		Thread parseThread = new Thread(xmlp, "parseThread");
		parseThread.start();

	}

	private void processEvent(XMLTag event) {
		System.err.println(event.toString());
	}

	public void run() throws ParserConfigurationException, SAXException,
			IOException, InterruptedException {
		String serverAddress = getServerAddress();
		// Using the address from the input try to connect a socket.
		if (!attemptConnection(serverAddress)) {

		}
		// If successful make a parser
		startParsing();

		while (true) {
			XMLTag nextEvent = bq.take();
			processEvent(nextEvent);
		}
	}

	public static void main(String[] args) throws ParserConfigurationException,
			SAXException, IOException, InterruptedException {
		TileNetClient client = new TileNetClient();
		client.jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		client.jframe.setVisible(true);
		client.run();
	}

}
