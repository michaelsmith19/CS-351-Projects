package com.putable.tilenet.Util;

import java.io.PrintStream;

import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * This is the error handler from the java tutorial Trail for SAX. It performs
 * the functionality that we want including throwing a {@link SAXException} for
 * errors as well as fatal errors. The errors mostly come from improper
 * validation based on the DTD. In our implementation we are treating validation
 * errors as unrecoverable and severing the connection. Having the Exception
 * thrown makes it easier to know when to kill the connection of the agent that
 * is IN ERROR.
 * 
 * @author michaelsmith
 */

public class XMLErrorHandler implements ErrorHandler {
	/** Error handler output goes here */
	private PrintStream out;

	XMLErrorHandler(PrintStream out) {
		this.out = out;
	}

	/**
	 * Returns a string describing parse exception details
	 */
	private String getParseExceptionInfo(SAXParseException spe) {
		String systemId = spe.getSystemId();
		if (systemId == null) {
			systemId = "null";
		}
		String info = "URI=" + systemId + " Line=" + spe.getLineNumber() + ": "
				+ spe.getMessage();
		return info;
	}

	// The following methods are standard SAX ErrorHandler methods.
	// See SAX documentation for more info.

	public void warning(SAXParseException spe) throws SAXException {
		out.println("Warning: " + getParseExceptionInfo(spe));
	}

	public void error(SAXParseException spe) throws SAXException {
		String message = "Error: " + getParseExceptionInfo(spe);
		throw new SAXException(message);
	}

	public void fatalError(SAXParseException spe) throws SAXException {
		String message = "Fatal Error: " + getParseExceptionInfo(spe);
		throw new SAXException(message);
	}
}
