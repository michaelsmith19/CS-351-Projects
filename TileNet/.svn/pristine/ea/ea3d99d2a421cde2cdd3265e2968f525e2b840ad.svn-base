package com.putable.tilenet.Server;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.putable.tilenet.Controller.Controller;
import com.putable.tilenet.Tests.TileNetExceptionHandler;
import com.putable.tilenet.Util.Common;

/**The model for a TileNet implementation
 * @author ClassCastExceptions
 */
public class ServerModel implements Callable<Void>{
	private boolean isRunning;
	private final int port;
	private final int maxConnections;
	private final TileNetExceptionHandler tileNetExceptionHandler;
	private final ExecutorService ex;
	private final List<Controller> connections;	
	
	/**A singular server constructor
	 * @param port
	 * 		The port to listen for connections on
	 * @param maxConnections
	 * 		Maximum number of concurrent connections to accept, after which the server will reply it is busy
	 */
	public ServerModel(int port, int maxConnections){
		this.isRunning = false;
		this.port = port;
		this.maxConnections = maxConnections;
		tileNetExceptionHandler = new TileNetExceptionHandler();
		this.connections = new ArrayList<Controller>();
		this.ex = Executors.newCachedThreadPool();
	}

	@Override
	public Void call() throws Exception{
		//Add our very own exception handler
		Thread.setDefaultUncaughtExceptionHandler(tileNetExceptionHandler);
		//Give this Thread a name
		Thread.currentThread().setName("SERVERMODEL");		
		//Check for address in use
		ServerSocket serverSocket = null;		
		serverSocket = new ServerSocket(port);
		isRunning = true;
				
		
		//Runs until told to stop
		int agentNumber = 0;
		while(isRunning){
			ex.submit(new Controller(this, ++agentNumber, serverSocket.accept()));
		}
		
		ex.shutdownNow();
		while(!ex.isTerminated()) { }
		return null;
	}

	public void sendLoginFor(Controller controller, Socket sock) throws IOException {
		PrintWriter outgoing = Common.getWriterFromSock(sock);
		if(connections.size() >= maxConnections){
			outgoing.println("SERVER BUSY");
		} else {
			connections.add(controller);		
			outgoing.println("HERES SOME XML FOR LOGIN FROM SERVER");
		}
	}

	public void terminateConnection(Controller controller, Socket sock) throws IOException {
		connections.remove(controller);
		PrintWriter outgoing = Common.getWriterFromSock(sock);
		outgoing.println("FIN");		
	}
	
	public void terminateServer(){
		System.out.println("Server received shutdown request");
		this.isRunning = false;
	}
	
	public boolean isRunning(){
		return isRunning;
	}
	
}
