package com.putable.tilenet.server;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

import com.putable.tilenet.Util.Common;
import com.putable.tilenet.Util.XMLTags.ClientTag;
import com.putable.tilenet.Util.XMLTags.LoggedIn;
import com.putable.tilenet.Util.XMLTags.LoginTag;
import com.putable.tilenet.Util.XMLTags.ServerTag;
import com.putable.tilenet.Util.XMLTags.XMLTag;
import com.putable.tilenet.blueprints.Element.ElemType;
import com.putable.tilenet.blueprints.ElementBuilder;
import com.putable.tilenet.blueprints.TileNetElementBuilder;
import com.putable.tilenet.connection.Connection;
import com.putable.tilenet.controller.Controller;
import com.putable.tilenet.matrixelement.Agent;

/**
 * The model for a TileNet implementation
 * 
 * @author ClassCastExceptions
 */
public class ServerModel implements Callable<Void> {
	private boolean isRunning;
	private final int port;
	private final int maxConnections;
	private final ExecutorService ex;
	private final ServerDispatch dispatch;
	

	/**
	 * A dispatch thread used for the execution of received events. A
	 * {@link Controller} will place events into its
	 * {@link LinkedBlockingQueue}
	 * 
	 * @author ClassCastExceptions
	 */
	public final class ServerDispatch implements Callable<Void> {		
		private final String serverHeader = "<?xml version='1.0' encoding='utf-8'?><!DOCTYPE server SYSTEM \"http://putable.com/TileNet/TileNet1.0.dtd\">";

		// Our shared state
		private final WorldModelImpl state;
		private final ConcurrentMap<String, String> passwds;
		private final LinkedBlockingQueue<Pair> queue;
		//private final ConcurrentMap<String, Connection> whoTheFuckSentThis;

		public ServerDispatch() {
			Thread.currentThread().setName("SERVER_DISPATCH");
			this.state = new WorldModelImpl();
			this.queue = new LinkedBlockingQueue<Pair>();
			//this.whoTheFuckSentThis = new ConcurrentHashMap<String, Connection>();
			this.passwds = new ConcurrentHashMap<String, String>();
			//TODO populate passwords in some way
			passwds.put("zach", "rocks");
			passwds.put("gladios", "cake");
		}

		public LinkedBlockingQueue<Pair> getQueue() {
			return this.queue;
		}

		@Override
		public Void call() throws Exception {
			Pair command = null;			
			while (true) {				
				command = queue.take();				
				switch (command.getTag().getTagType()) {
				case CLIENT:
					validateClientTag(command);
					break;
				case CMD:
					break;
				case HEAR:
					break;
				case LOGGEDIN:
					break;
				case LOGGEDOUT:
					break;
				case LOGIN:
					validatePasswd(command);
					break;
				case LOGOUT:
					break;
				case SERVER:
					break;
				case SET:
					break;
				case XREQUEST:
					break;
				case XRESPONSE:
					break;
				default:
					break;

				}				
			}
		}

		/**
		 * Register a new connection. This method is called by the
		 * {@link Controller} associated with a connection Catching Exceptions
		 * because we need this to keep running
		 * 
		 * @param A self reference to the {@link Controller} who called this
		 */
		public void requestServerTag(Controller conntroller, Connection connection) {			
			/*					Server
			 * 
			 *	((c8.8.4)) TAG PURPOSE: Announce a server's identifying information
		     *	and status to a (potential) client.
			 *
			 *	((c8.8.5)) TAG SEQUENCING: Is the document root tag for the server
		     *	side of the communication, so obviously the server tag open
		     *	must be the first thing sent after the XML and DTD headers,
		     *	and the server tag close must be the last thing sent before
		     *	the server output side of the connection is closed.
			 */
			XMLTag serverTag = serverStatus();			
			connection.sendMessage(serverHeader + serverTag);
		}

		private void validateClientTag(Pair p){
			ClientTag tag = (ClientTag) p.getTag();
			/*					Client	
			 * 
			 *	((c8.1.4)) TAG PURPOSE: Announce a client's version to a server.
			 *
			 * 	((c8.1.5)) TAG SEQUENCING: client Is the document root tag for
			 *  the client side of the communication, so obviously the client open
			 *	must be the first thing sent after the XML and DTD headers,
			 *	and the client close must be the last thing sent before the
			 *	client output side of the connection is closed.
			 *
			 *	((c8.1.5.1)) As discussed in (cXXX), in the TileNet protocol
			 *	the server is required to 'speak first', so the client tag
			 *	(and the XML and DTD headers before it) are not to be sent
			 *	until the server open tag has been successfully parsed.
			 *
			 *  ((c8.1.6.1.3)) SERVER: MUST ensure this value is present and correct
		     *  (which is automatically done by parsing it with a
		     *  validating XML parser) and treat the input as a
		     *  parsing error if it isn't.
			 */
			if(tag.getVersion().compareTo("1.1") == 0){
				//TODO Nothing??
			} else {
				System.err.println("Error in version number. Got: " + tag.getVersion());
				p.getConnection().disconnect();
			}
		}

		private void validatePasswd(Pair p) {
			LoginTag tag = (LoginTag) p.getTag();
			/*						Login
			 * 
			 * 	((c8.6.4)) TAG PURPOSE: Authenticate a client to a server and
			 *	associate a particular user name and connection information
			 *	with a particular agent instance in the world.
			 *
			 *	((c8.6.5))  TAG SEQUENCING: Is sent at least once after the client tag  
	         *	is opened.  After sending, client MUST wait for a logged-in
	         *	tag from server before sending anything more.  If the
	         *	returned logged-in tag indicates success, client MUST send
	         *	no further login tags during that session.  If the returned
	         *	logged-in tag indicates failure, client MAY choose to
	         *	modify the user and/or password information (presumably in
	         *	consultation with the client's user) and send another login
	         *	tag.
	         */			
			if(passwds.get(tag.getUser()).compareTo(tag.getPassword()) == 0){
				/*					Logged-in
				 * 
				 *  ((c8.4.4)) TAG PURPOSE: Allow a server to let a client know whether
		         *  the client's login attempt succeeded or failed.  In
		         *  addition, if the login attempt succeeded, inform the client
		         *  of the identity of the agent associated with the client.
		         *  
				 *	((c8.4.5)) TAG SEQUENCING: A logged-in tag MUST be the first tag sent
		         *  after a server open tag, sent upon receipt of a login tag
		         *  from the client.  Multiple logged-in tags may be sent in a
		         *  single session but only when all but the last one specific
		         *  failure to login.
				 */
				ElementBuilder makeElements = new TileNetElementBuilder();
				Agent jones = (Agent) makeElements.orderElement(ElemType.AGENT);
				
				
				p.getConnection().sendMessage(new LoggedIn(jones.getObjid(),
						"Welcome to TileNet " + tag.getUser() + ". You have been assigned #" + jones.getObjid()));				
				
				//ALL LOGGED IN :)
				state.giveAgent(jones, p.getConnection());			
				
			}else{
				System.err.println("Error on passwords");
				p.getConnection().disconnect();
			}
			
		}

		/**Ask the server if busy
		 *  
		 * @return
		 * 		an open or busy {@link ServerTag}
		 * 
		 */
		private XMLTag serverStatus() {
			//TODO fixme
			//return (queue.size() >= maxConnections) ? new ServerTag(
			//		"busy") : new ServerTag("open");
			return new ServerTag("open");
		}

		/**
		 * Put an event into the {@link LinkedBlockingQueue} method used by {@link Controller}
		 * 
		 * @param command
		 *            The {@link XMLTag} (event)
		 */
		public void put(Pair p) {			
			queue.add(p);
		}

		/**
		 * Ask the client to terminate itself
		 * 
		 * @param controller
		 *            The connection handler for the client
		 * @throws IOException
		 *             When writing to the socket
		 */
		public void sendTerminationXML(Controller controller)
				throws IOException {
			//whoTheFuckSentThis.remove(controller.getSock());
			PrintWriter outgoing = Common.getWriterFromSock(controller
					.getSock());
			outgoing.println("<logged-out message=\"you logged out\">");
			// XXX Should kill socket after??
		}

		/**
		 * Tells the Server to kill and remove the connection immediately
		 * 
		 * @param controller
		 *            The connection handler for the client
		 * @throws IOException
		 */
		public void terminateConnection(Connection conn)
				throws IOException {							
			//TODO fixme
			System.err.println("TODO: remove this controllers commands from queue");
			conn.disconnect();
		}

		/**
		 * Removes every connection, sets the server like it was just started
		 * 
		 * @throws IOException
		 */
		private void terminateAllConnections() throws IOException {
			//for (Pair p : whoTheFuckSentThis.values()) {
				//conn.disconnect();
			//}
			//whoTheFuckSentThis.clear();
			queue.clear();
		}
	}

	// /-------------END INNERCLASS

	/**
	 * A singular server constructor
	 * 
	 * @param port
	 *            The port to listen for connections on
	 * @param maxConnections
	 *            Maximum number of concurrent connections to accept, after
	 *            which the server will reply it is busy
	 */
	public ServerModel(int port, int maxConnections) {
		this.isRunning = false;
		this.port = port;
		this.maxConnections = maxConnections;
		this.ex = Executors.newCachedThreadPool();
		this.dispatch = new ServerDispatch();
		
	}

	@Override
	public Void call() throws Exception {
		// Give this Thread a name
		Thread.currentThread().setName("SERVERMODEL");

		ServerSocket serverSocket = null;
		try {
			serverSocket = new ServerSocket(port);
			isRunning = true;
		} catch (Exception e) {
			System.err.println("Failed to bind port: " + port + "\n");
			throw e;
		}

		// ----------Place Dispatcher
		ex.submit(dispatch);
		// ----------

		while (isRunning) {
			ex.submit(new Controller(dispatch, serverSocket.accept()));
		}

		ex.shutdownNow();
		while (!ex.isTerminated()) {
		}
		serverSocket.close();
		return null;
	}

	public void terminateServer() {
		System.out.println("Server received shutdown request");
		this.isRunning = false;
	}

	public int getConnected() {
		//TODO
		return 2;
	}

	public void removeAll() {
		try {
			dispatch.terminateAllConnections();
		} catch (IOException e) {
			System.err.println("Error terminating connections on server");
		}
	}

	public boolean isRunning() {
		return isRunning;
	}

	public ServerDispatch getDispatcher() {
		return dispatch;
	}
}
