package com.putable.tilenet.matrix;

import java.awt.Color;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.concurrent.ConcurrentHashMap;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.xml.stream.events.Attribute;

import org.w3c.dom.Element;

import com.putable.tilenet.matrix.MatrixElementFactory.ElemType;


/**
 * @author ClassCastExeptions
 * Recieve log-in tag
 */
public class Matrix extends MatrixElement {
	
	public ConcurrentHashMap<Point,MatrixElement> layout = new ConcurrentHashMap<Point,MatrixElement>();
	
	private int tileNumber,tileRow,tileCol;
	
	
	
	public Matrix() {
		super(ElemType.MATRIX);
	}
	
	
	public int getTileRow() {
		return tileRow;
	}


	public void setTileRow(int tileRow) {
		this.tileRow = tileRow;
	}


	public int getTileCol() {
		return tileCol;
	}


	public void setTileCol(int tileCol) {
		this.tileCol = tileCol;
	}


	public ConcurrentHashMap<Point,MatrixElement> getLayout(){
		return layout;
	}
	
	public void addMatrixElement(Point point, MatrixElement me){
		layout.put(point, me);
	}
	
	public void setTileNumber(int tileNumber){
		this.tileNumber = tileNumber;
		tileRow = ((int)Math.sqrt(this.tileNumber));
		tileCol = ((int)Math.sqrt(this.tileNumber));
		
	}

	@Override
	public ImageIcon getDisplay(int titleSize) {
		return null;
	}
	
	
	/*TODO process an XmlElement to determine if changes were made to the matrix
	 * 	   
//Color bgcolor, Color fgcolor,
//	int x, int y, String name, String text, Image image
	public void processXmlElement(XMLElement xe){
		switch (xe.getType()){
		case LOGGED_IN: ;
			break;
		case SET: setAttributes( xe.getBgcolor(), xe.getFgcolor(),
				xe.getX(), xe.getY(), xe.getName(), 
				 xe.getText(), xe.getImage()); 
		
		}
		
		
		
	}*/
	
}
