package com.putable.tilenet.client;

import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.putable.tilenet.Util.ChatFeature;
import com.putable.tilenet.Util.XMLParser;
import com.putable.tilenet.Util.XMLTags.XMLTag;
import com.putable.tilenet.grid.Grid;
import com.putable.tilenet.matrixelement.Agent;
import com.putable.tilenet.matrixelement.MatrixElementBuilder;
import com.putable.tilenet.matrixelement.TileNetMatrixElementBuilder;
import com.putable.tilenet.server.ServerModel;

public class Client {
	private static JFrame frame;
	private final static int PORT = 44455;
	private Agent agent;
	// private BlockingQueue<XMLTag> eventQueue;
	private ServerModel connectedTo;
	private Grid currentMatrix;

	public Client(Agent agent) {

	}

	/**
	 * Takes the {@link String} that represents the server status. This string
	 * can only be "open", "closed", or "busy".
	 * 
	 * @param serverStatus
	 *            {@link String} that holds the status sent from the server in
	 *            the server tag
	 * 
	 * @return only returns true if the serverStatus was "open" meaning a
	 *         connection was established
	 * 
	 */
	public boolean validateServerStatus(String serverStatus) {
		if (serverStatus.equals("open")) {
			return true;
		} else if (serverStatus.equals("closed")) {
			JOptionPane.showMessageDialog(null, "This server is "
					+ "closed please try again later.");
			return false;
		} else {
			JOptionPane.showMessageDialog(null, "This server is busy"
					+ " please try again later.");
			return false;
		}

	}

	public void startSession() {

	}

	public static void makeGUI() {
		frame = new JFrame();
		JPanel chatPanel = new ChatFeature();
		frame.getContentPane().add(chatPanel);
	}

	/*
	 * TODO add GUI
	 */
	public static void main(String[] args) throws IOException, SAXException,
			ParserConfigurationException, InterruptedException {
		String hostName = JOptionPane.showInputDialog(null, "Enter Hostname:");

		MatrixElementBuilder makeElements = new TileNetMatrixElementBuilder();
		Agent agent = (Agent) makeElements.orderElement("AGENT");

		// Try to connect to the port. If successful you will receive a valid
		// xml doctype and opening server tag.
		try {
			agent.getConn().connect(hostName, PORT);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Cannot connect to: "
					+ hostName);
			return;
		}

		BlockingQueue<XMLTag> eventQ = new LinkedBlockingQueue<XMLTag>();

		XMLParser xmlp = new XMLParser(eventQ);

		xmlp.beginParse(new InputSource(agent.getConn().getIn2()));

		// String agentName = JOptionPane.showInputDialog(null, "Agent name:");
		// agent.setName(agentName);

		for (XMLTag t : eventQ) {

			System.out.println(t.toString());
		}

		makeGUI();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.pack();
	}
}
