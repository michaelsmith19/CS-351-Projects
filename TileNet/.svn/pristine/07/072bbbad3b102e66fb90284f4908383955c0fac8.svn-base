package com.putable.tilenet.Util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import com.putable.tilenet.Client.AutoAgent;
import com.putable.tilenet.matrix.MatrixElementFactory;
import com.putable.tilenet.matrix.MatrixElementFactory.ElemType;

/**A Class that holds common utility methods in a static forum
 * @author ClassCastExceptions
 */
public class Common {	
	private static final long botTimeoutMilli = 8000;
	
	public static final List<String> botcmd_ConnectDisconnect = Arrays.asList(
			"WAIT_RESPONCE",
			"SEND:Bot XML Stuff",
			"SEND:FIN",
			"EXPECT:FIN",
			"DISCONNECT");
	public static final List<String> botcmd_Connect = Arrays.asList(
			"WAIT_RESPONCE",
			"SEND:Bot XML Stuff");
	
	public static BufferedReader getReaderFromSock(Socket sock) throws IOException{
		return new BufferedReader(new InputStreamReader(sock.getInputStream()));
	}
	
	public static PrintWriter getWriterFromSock(Socket sock) throws IOException{
		return new PrintWriter(sock.getOutputStream(), true);
	}
	
	public static boolean sendTheBots(int port, int count, List<String> commands) throws UnknownHostException, IOException{
		ArrayList<String> instructions = new ArrayList<String>();
		instructions.addAll(Arrays.asList("ROBOT", String.valueOf(port)));
		instructions.addAll(commands);
		
		
		//Create count AutoAgents
		ExecutorService clientEx = Executors.newCachedThreadPool();
		for(int i = 0; i < count; i++){
			clientEx.submit((AutoAgent) MatrixElementFactory.produce(ElemType.AUTOAGENT, instructions.toArray(new String[instructions.size()])));
		}
		
		//Tell thread pool to shutdown when there's nothing left.
		//REMINDER If a robot hangs, the thread pool will not terminate until botTimeoutMilli
		boolean success = false;
		try {
			clientEx.shutdown();
			success = clientEx.awaitTermination(botTimeoutMilli, TimeUnit.MILLISECONDS);
		} catch (Exception e){
			System.err.println("Robot thread Timeout");
		}
		return success;
		
		
	}
}
