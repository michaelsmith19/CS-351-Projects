package com.putable.tilenet.connection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.rmi.UnknownHostException;

import com.putable.tilenet.Util.Common;

public class AgentConnection implements Connection {
	private Socket sock;
	private PrintWriter out;
	private BufferedReader in;
	private InputStream in2;

	@Override
	public InputStream getIn2() {
		return in2;
	}

	@Override
	public PrintWriter getOut() {
		return out;
	}

	@Override
	public BufferedReader getIn() {
		return in;
	}

	@Override
	public Socket getSock() {
		return sock;
	}

	@Override
	public void connect(String toWhere, int onPort)
			throws UnknownHostException, IOException {
		this.sock = new Socket(toWhere, onPort);
		this.out = Common.getWriterFromSock(sock);
		this.in = Common.getReaderFromSock(sock);
		this.in2 = Common.getInputStreamFromSock(sock);
	}

	@Override
	public void disconnect() throws IOException {
		// Not needed to close in-out stream but we do
		in.close();
		out.close();
		sock.close();
	}

	@Override
	public String getServerResponce() throws IllegalStateException, IOException {
		if (in == null)
			throw new IllegalStateException("No handle for BufferedReader in");
		while (!in.ready()) {/* Wait until ready */
		}
		return in.readLine();
	}

	@Override
	public void sendMessage(String message) throws IllegalStateException {
		if (out == null)
			throw new IllegalStateException("No handle for PrintWriter out");
		out.println(message);
	}

	@Override
	public void expect(String expected) throws IllegalStateException,
			IOException {
		if (in == null)
			throw new IllegalStateException("No handle for BufferedReader in");
		while ((expected = getServerResponce()).compareTo(expected) != 0) { /* Wait */
		}
	}

}
