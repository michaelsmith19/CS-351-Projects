package com.putable.tilenet.Controller;


import java.io.BufferedReader;
import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.Callable;

import com.putable.tilenet.Server.ServerModel;
import com.putable.tilenet.Util.Common;


/**Runs in the ThreadPool of {@link ServerModel}. Each instance of {@link Controller} represents a singular connection to 
 * the Server.
 * @author ClassCastExceptions
 */
public class Controller implements Callable<Boolean>{
	private boolean cleanShutdown = false;
	private final ServerModel serverModel;
	private final int refrenceNumber;
	private final Socket sock;
	private final BufferedReader incoming;

	/** The individual instance of a client
	 * @param serverModel
	 * 		The Model it will manipulate 
	 * @param refrenceNumber
	 * 		Unique agent number that identifies this agent
	 * @param sock
	 * 		The socket associated with the connection to the Agent
	 * @throws IOException 
	 */
	public Controller(ServerModel serverModel, int refrenceNumber, Socket sock) throws IOException{	
		this.serverModel = serverModel;
		//TODO not unique as of now.
		this.refrenceNumber = refrenceNumber;
		this.sock = sock;
		this.incoming = Common.getReaderFromSock(sock);
	}

	@Override
	public Boolean call() throws Exception {
		
		//Requests server information for new Agent
		requestLogin();
		
		//Should already be parsed string
		while(!sock.isClosed()){
			
			String fromClient = getAgentMessage();
			
			doSomthingToServer(fromClient);			
			
		}
		
		
		return cleanShutdown;
	}
	
	private void doSomthingToServer(String fromClient) throws IOException {
		//XXX Some kind of command parser goes here
		
		if(fromClient.compareTo("FIN") == 0){
			requestTermination();
			if(getAgentMessage().compareTo("FIN") == 0){
				cleanShutdown = true;
			}
		}
		
	}

	public Socket getSock(){
		return sock;
	}
	
	private String getAgentMessage() throws IOException{
		//Can add a timeout here
		while(!incoming.ready()){ }		
		return incoming.readLine();
	}
	
	private void requestLogin() throws IOException{
		serverModel.sendLoginFor(this);
	}
	
	private void requestTermination() throws IOException{
		serverModel.sendTerminationXML(this);
	}
	
	
}