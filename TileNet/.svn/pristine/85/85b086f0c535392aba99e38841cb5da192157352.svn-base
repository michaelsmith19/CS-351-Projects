package com.putable.tilenet.Server;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**The engine for a server
 * @author ClassCastExceptions
 */
public class ServerModel implements Callable<Void>{
	private final int PORT;
	private final int MAX_AGENTS;
	private final ThreadPoolExecutor ex;
	
	/**A singular Server constructor
	 * @param PORT
	 * 		The port to listen for connections on
	 * @param MAX_AGENTS
	 * 		Maximum number of connections to accept (to be refined later)
	 */
	public ServerModel(int PORT, int MAX_AGENTS){
		this.PORT = PORT;
		this.MAX_AGENTS = MAX_AGENTS;
		//Using this implementation instead of the factory method of Executors. We want to call activeCount() eventually
		this.ex = new ThreadPoolExecutor(MAX_AGENTS, MAX_AGENTS, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
	}

	@Override
	public Void call() throws Exception{
		ServerSocket serverSocket = null;
		try {
			serverSocket = new ServerSocket(PORT);
		} catch (Exception e){
			System.out.println("Failed to get PORT:" + PORT);
			System.exit(0);
		}
		int currentAgents = 0;
		//Accepts MAX_AGENTS incoming connections as of now
		while(currentAgents < MAX_AGENTS ){
			ex.submit(new AgentHandler(currentAgents++, serverSocket.accept()));
		}
		//XXX As of now, will shutdown when MAX_AGENTS have connected
		//we need to add something to say when to shutdown
		ex.shutdown();
		while(!ex.isTerminated()) { }
		return null;
	}

	//Nested class for the handling of agents
	private class AgentHandler implements Callable<Void>{
		private int agentNumber;
		private Socket sock;
		
		/** The individual instance of an agent
		 * @param agentNumber
		 * 		Unique agent number that identifies this agent
		 * @param sock
		 * 		The socket used for sending-receiving for this particular agent
		 */
		public AgentHandler(int agentNumber, Socket sock){
			this.agentNumber = agentNumber;
			this.sock = sock;
		}

		@Override
		public Void call() throws Exception {
			BufferedReader clientStream = new BufferedReader(new InputStreamReader(sock.getInputStream()));
			//TODO handle the client input here or whatever we decide to do
			System.out.println("Connect from:" + agentNumber);
			//Just use readline for now
			String message;
			while((message = clientStream.readLine()) != null)
				System.out.print(message);
			clientStream.close();
			sock.close();
			return null;
		}
	}
	
}
